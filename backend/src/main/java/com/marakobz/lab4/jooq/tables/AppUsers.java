/*
 * This file is generated by jOOQ.
 */
package com.marakobz.lab4.jooq.tables;


import com.marakobz.lab4.jooq.tables.records.AppUsersRecord;
import com.marakobz.lab4.jooq.Keys;
import com.marakobz.lab4.jooq.Public;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppUsers extends TableImpl<AppUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.app_users</code>
     */
    public static final AppUsers APP_USERS = new AppUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppUsersRecord> getRecordType() {
        return AppUsersRecord.class;
    }

    /**
     * The column <code>public.app_users.id</code>.
     */
    public final TableField<AppUsersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.app_users.name</code>.
     */
    public final TableField<AppUsersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.app_users.password</code>.
     */
    public final TableField<AppUsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private AppUsers(Name alias, Table<AppUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppUsers(Name alias, Table<AppUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.app_users</code> table reference
     */
    public AppUsers(String alias) {
        this(DSL.name(alias), APP_USERS);
    }

    /**
     * Create an aliased <code>public.app_users</code> table reference
     */
    public AppUsers(Name alias) {
        this(alias, APP_USERS);
    }

    /**
     * Create a <code>public.app_users</code> table reference
     */
    public AppUsers() {
        this(DSL.name("app_users"), null);
    }

    public <O extends Record> AppUsers(Table<O> child, ForeignKey<O, AppUsersRecord> key) {
        super(child, key, APP_USERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<AppUsersRecord, Integer> getIdentity() {
        return (Identity<AppUsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AppUsersRecord> getPrimaryKey() {
        return Keys.APP_USERS_PKEY;
    }

    @Override
    public List<UniqueKey<AppUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<AppUsersRecord>>asList(Keys.APP_USERS_PKEY, Keys.APP_USERS_NAME_KEY);
    }

    @Override
    public AppUsers as(String alias) {
        return new AppUsers(DSL.name(alias), this);
    }

    @Override
    public AppUsers as(Name alias) {
        return new AppUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppUsers rename(String name) {
        return new AppUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppUsers rename(Name name) {
        return new AppUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
