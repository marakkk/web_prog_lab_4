/*
 * This file is generated by jOOQ.
 */
package com.marakobz.lab4.jooq.tables;


import com.marakobz.lab4.jooq.tables.records.AuditedMethodsRecord;
import com.marakobz.lab4.jooq.Public;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditedMethods extends TableImpl<AuditedMethodsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.audited_methods</code>
     */
    public static final AuditedMethods AUDITED_METHODS = new AuditedMethods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditedMethodsRecord> getRecordType() {
        return AuditedMethodsRecord.class;
    }

    /**
     * The column <code>public.audited_methods.id</code>.
     */
    public final TableField<AuditedMethodsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.audited_methods.user_id</code>.
     */
    public final TableField<AuditedMethodsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.audited_methods.method_signature</code>.
     */
    public final TableField<AuditedMethodsRecord, String> METHOD_SIGNATURE = createField(DSL.name("method_signature"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.audited_methods.calling_date</code>.
     */
    public final TableField<AuditedMethodsRecord, LocalDateTime> CALLING_DATE = createField(DSL.name("calling_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private AuditedMethods(Name alias, Table<AuditedMethodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditedMethods(Name alias, Table<AuditedMethodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.audited_methods</code> table reference
     */
    public AuditedMethods(String alias) {
        this(DSL.name(alias), AUDITED_METHODS);
    }

    /**
     * Create an aliased <code>public.audited_methods</code> table reference
     */
    public AuditedMethods(Name alias) {
        this(alias, AUDITED_METHODS);
    }

    /**
     * Create a <code>public.audited_methods</code> table reference
     */
    public AuditedMethods() {
        this(DSL.name("audited_methods"), null);
    }

    public <O extends Record> AuditedMethods(Table<O> child, ForeignKey<O, AuditedMethodsRecord> key) {
        super(child, key, AUDITED_METHODS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<AuditedMethodsRecord, Integer> getIdentity() {
        return (Identity<AuditedMethodsRecord, Integer>) super.getIdentity();
    }

    @Override
    public AuditedMethods as(String alias) {
        return new AuditedMethods(DSL.name(alias), this);
    }

    @Override
    public AuditedMethods as(Name alias) {
        return new AuditedMethods(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditedMethods rename(String name) {
        return new AuditedMethods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditedMethods rename(Name name) {
        return new AuditedMethods(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
