/*
 * This file is generated by jOOQ.
 */
package com.marakobz.lab4.jooq.tables;


import com.marakobz.lab4.jooq.Keys;
import com.marakobz.lab4.jooq.Public;
import com.marakobz.lab4.jooq.tables.records.HitChecksRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HitChecks extends TableImpl<HitChecksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.hit_checks</code>
     */
    public static final HitChecks HIT_CHECKS = new HitChecks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HitChecksRecord> getRecordType() {
        return HitChecksRecord.class;
    }

    /**
     * The column <code>public.hit_checks.id</code>.
     */
    public final TableField<HitChecksRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.hit_checks.user_id</code>.
     */
    public final TableField<HitChecksRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.hit_checks.x</code>.
     */
    public final TableField<HitChecksRecord, Double> X = createField(DSL.name("x"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.hit_checks.y</code>.
     */
    public final TableField<HitChecksRecord, Double> Y = createField(DSL.name("y"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.hit_checks.r</code>.
     */
    public final TableField<HitChecksRecord, Double> R = createField(DSL.name("r"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.hit_checks.calling_date</code>.
     */
    public final TableField<HitChecksRecord, OffsetDateTime> CALLING_DATE = createField(DSL.name("calling_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.hit_checks.execution_time</code>.
     */
    public final TableField<HitChecksRecord, Long> EXECUTION_TIME = createField(DSL.name("execution_time"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.hit_checks.hit_status</code>.
     */
    public final TableField<HitChecksRecord, Boolean> HIT_STATUS = createField(DSL.name("hit_status"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private HitChecks(Name alias, Table<HitChecksRecord> aliased) {
        this(alias, aliased, null);
    }

    private HitChecks(Name alias, Table<HitChecksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.hit_checks</code> table reference
     */
    public HitChecks(String alias) {
        this(DSL.name(alias), HIT_CHECKS);
    }

    /**
     * Create an aliased <code>public.hit_checks</code> table reference
     */
    public HitChecks(Name alias) {
        this(alias, HIT_CHECKS);
    }

    /**
     * Create a <code>public.hit_checks</code> table reference
     */
    public HitChecks() {
        this(DSL.name("hit_checks"), null);
    }

    public <O extends Record> HitChecks(Table<O> child, ForeignKey<O, HitChecksRecord> key) {
        super(child, key, HIT_CHECKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<HitChecksRecord, Integer> getIdentity() {
        return (Identity<HitChecksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HitChecksRecord> getPrimaryKey() {
        return Keys.HIT_CHECKS_PKEY;
    }

    @Override
    public List<UniqueKey<HitChecksRecord>> getKeys() {
        return Arrays.<UniqueKey<HitChecksRecord>>asList(Keys.HIT_CHECKS_PKEY);
    }

    @Override
    public List<ForeignKey<HitChecksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HitChecksRecord, ?>>asList(Keys.HIT_CHECKS__FK_USER);
    }

    private transient AppUsers _appUsers;

    public AppUsers appUsers() {
        if (_appUsers == null)
            _appUsers = new AppUsers(this, Keys.HIT_CHECKS__FK_USER);

        return _appUsers;
    }

    @Override
    public HitChecks as(String alias) {
        return new HitChecks(DSL.name(alias), this);
    }

    @Override
    public HitChecks as(Name alias) {
        return new HitChecks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HitChecks rename(String name) {
        return new HitChecks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HitChecks rename(Name name) {
        return new HitChecks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Double, Double, Double, OffsetDateTime, Long, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
