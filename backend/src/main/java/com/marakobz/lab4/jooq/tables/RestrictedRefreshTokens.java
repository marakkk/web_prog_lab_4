/*
 * This file is generated by jOOQ.
 */
package com.marakobz.lab4.jooq.tables;


import com.marakobz.lab4.jooq.Public;
import com.marakobz.lab4.jooq.tables.records.RestrictedRefreshTokensRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RestrictedRefreshTokens extends TableImpl<RestrictedRefreshTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.restricted_refresh_tokens</code>
     */
    public static final RestrictedRefreshTokens RESTRICTED_REFRESH_TOKENS = new RestrictedRefreshTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RestrictedRefreshTokensRecord> getRecordType() {
        return RestrictedRefreshTokensRecord.class;
    }

    /**
     * The column <code>public.restricted_refresh_tokens.id</code>.
     */
    public final TableField<RestrictedRefreshTokensRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.restricted_refresh_tokens.token</code>.
     */
    public final TableField<RestrictedRefreshTokensRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR.nullable(false), this, "");

    private RestrictedRefreshTokens(Name alias, Table<RestrictedRefreshTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private RestrictedRefreshTokens(Name alias, Table<RestrictedRefreshTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.restricted_refresh_tokens</code> table reference
     */
    public RestrictedRefreshTokens(String alias) {
        this(DSL.name(alias), RESTRICTED_REFRESH_TOKENS);
    }

    /**
     * Create an aliased <code>public.restricted_refresh_tokens</code> table reference
     */
    public RestrictedRefreshTokens(Name alias) {
        this(alias, RESTRICTED_REFRESH_TOKENS);
    }

    /**
     * Create a <code>public.restricted_refresh_tokens</code> table reference
     */
    public RestrictedRefreshTokens() {
        this(DSL.name("restricted_refresh_tokens"), null);
    }

    public <O extends Record> RestrictedRefreshTokens(Table<O> child, ForeignKey<O, RestrictedRefreshTokensRecord> key) {
        super(child, key, RESTRICTED_REFRESH_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<RestrictedRefreshTokensRecord, Integer> getIdentity() {
        return (Identity<RestrictedRefreshTokensRecord, Integer>) super.getIdentity();
    }

    @Override
    public RestrictedRefreshTokens as(String alias) {
        return new RestrictedRefreshTokens(DSL.name(alias), this);
    }

    @Override
    public RestrictedRefreshTokens as(Name alias) {
        return new RestrictedRefreshTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RestrictedRefreshTokens rename(String name) {
        return new RestrictedRefreshTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RestrictedRefreshTokens rename(Name name) {
        return new RestrictedRefreshTokens(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
